[gd_resource type="ShaderMaterial" load_steps=3 format=2]

[ext_resource path="res://Particle Assets/cloud-1.png" type="Texture" id=1]

[sub_resource type="Shader" id=12]

code = "shader_type canvas_item;

uniform float effect_visibility : hint_range(0.0, 1.0);
uniform sampler2D noiseTex;
uniform vec2 uvOffset;
uniform bool invertColors;
uniform bool useMissColor;
uniform vec4 missColor : hint_color;

vec3 invert(vec3 inVec)
{
	return inVec * -1.0 + 1.0;
}

void fragment()
{
	vec3 screenTex = texture(SCREEN_TEXTURE, SCREEN_UV).rgb;
	vec3 noise = texture(noiseTex, UV + TIME * 0.1).rgb;
	vec3 warpedTex = texture(SCREEN_TEXTURE, SCREEN_UV + (noise.r * 0.01) + uvOffset).rgb;
	
	vec2 center = vec2(0.5, 0.5);
	float dist = length(center - UV);
	
	if (true)//dist < 0.5 - noise.r * 0.4)
	{
		if (true)//dist < warpedTex.r * 1.3)
		{
			if (invertColors)
			{
				screenTex = invert(warpedTex);
			}
			else
			{
				screenTex = mix(screenTex, warpedTex, effect_visibility);
			}
		}
		else
		{
			if (useMissColor)
			{
				screenTex = missColor.rgb;
				COLOR.a = 0.1;
			}
		}
	}
	
	COLOR.a *= 1.0 - (dist * 2.5) + 0.5;
	
    COLOR.rgb = screenTex;
}"

[resource]

render_priority = 0
shader = SubResource( 12 )
shader_param/effect_visibility = 0.08
shader_param/uvOffset = Vector2( -0.005, 0 )
shader_param/invertColors = false
shader_param/useMissColor = false
shader_param/missColor = Color( 1, 0, 0, 1 )
shader_param/noiseTex = ExtResource( 1 )
_sections_unfolded = [ "shader_param" ]

